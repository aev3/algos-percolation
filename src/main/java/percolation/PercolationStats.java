/**
 * <p>
 * Class that will be used to analyze the statistics related to the
 * implementation of the {@link Percolation}.
 * </p>
 */
public class PercolationStats {

    /**
     * The threshold for percolation.
     */
    private double[] threshold;

    /**
     * Upper and lower bounds check fo interval.
     */
    private static final double INTERVAL = 1.96;

    /**
     * Perform t independent computational experiments on an n*n matrix.
     *
     * @param n  -  int representing the value for the row
     * @param t  -  int representing the value for the column
     */
    public PercolationStats(final int n, final int t) {

        int openCount, row, column;

        if (n <= 0 || t <= 0) {
            throw new IllegalArgumentException("Arguments out of bound");
        }

        threshold = new double[t];

        openCount = 0;
        for (int i = 0; i < t; i++) {
            Percolation pl = new Percolation(n);
            do {
                row = StdRandom.uniform(1, n + 1);
                column = StdRandom.uniform(1, n + 1);
                if (pl.isOpen(row, column)) {
                    continue;
                }
                pl.open(row, column);
                openCount++;
            } while (!pl.percolates());

            threshold[i] = (double) openCount / (n * n);
            openCount = 0;
        }
    }

    /**
     * Sample mean of percolation threshold.
     *
     * @return  - double that holds value generated by {@link StdStats} mean
     * method
     */
    public final double mean() {
        return StdStats.mean(threshold);
    }

    /**
     * Sample standard deviation of percolation threshold.
     *
     * @return - double that holds value generated by {@link StdStats} stddev
     * method
     */
    public final double stddev() {
        return StdStats.stddev(threshold);
    }

    /**
     * Sample standard deviation divided by the square root of the percolation's
     * threshold length.
     *
     * @return  - double that holds value generated by {@link StdStats}
     */
    private double halfInterval() {
        return INTERVAL * stddev() / Math.sqrt(threshold.length);
    }

    /**
     * Lower bound of confidence interval.
     *
     * @return  - lower bound of the 95% confidence interval
     */
    public final double confidenceLo() {
        return mean() - halfInterval();
    }

    /**
     * Upper bound of confidence interval.
     *
     * @return  - upper bound of the 95% confidence interval
     */
    public final double confidenceHi() {
        return mean() + halfInterval();
    }

    /**
     * Convenience main method that can be used for command line testing.
     *
     * @param args - String array for cli usage.
     */
    public static void main(final String[] args) {
        int n = Integer.parseInt(args[0]);
        int t = Integer.parseInt(args[1]);
        PercolationStats pls = new PercolationStats(n, t);
        System.out.printf("mean                     = %f\n", pls.mean());
        System.out.printf("stddev                   = %f\n", pls.stddev());
        System.out.printf("95%% confidence Interval  = %f, %f\n",
                pls.confidenceLo(), pls.confidenceHi());
    }
}
